# DevOps SetUP

## 
Installing Jenkins

> Create EC2 instance which will be the jenkins server
> In advanced networking open port 8080 for Jenkins
> In userdata add bash script to install java
!/bin/bash
sudo apt update
sudo apt-get -y jdk
 > When instance is started (server running) check if java install
 
$ java  -version
 
 > Run commands to install jenkins
 
$ curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
$ /usr/share/keyrings/jenkins-keyring.asc > /dev/null
    
$ echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
   https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
    
$ sudo apt-get update
$ sudo apt-get install fontconfig openjdk-11-jre
$ sudo apt-get install jenkins
 
 > When Jenkins is installed check status :
 
$ sudo systemctl status jenkins

> Status should be active
> Connect to server by using PupblicIP:8080
** Password is required. Run command

$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword

> use password to Unlock password
> Continue and install suggested password
> Generate ssh keys:
$ ssh-keygen
enter   ( password already encrypted so there is no need for added layer of security so continue without password)
enter
enter

$ ssh-copy-id ubuntu@<private_ip_qaserver>  
$ ssh-copy-id ubuntu@<private_ip_prodserver>  
* this copy the keys saved in .ssh/id_rsa.pub into the qa and prod servers
(dedicated command to copy the keys into qa and prod environemnt)
(these hold authentication for the jenkins server and we save)

 ## these steps allows passwordless authentication
 - To check keys saved
 
 $ cd .ssh
 $ ls
 $ cat id_rsa.pub
 
 ** the same keys will be on the prod server and qa server
 
 So prod and qa servers do a comparise when recieving request from jenkins server if they have authorised keys of the server requesting connection (jenkins server)
 - Matching keys will be found and connection allowed

## Setup on QA server

### Install tomcat:
$ sudo apt-get install -y tomcat9 tomcat9-admin

### Open a file :
$ sudo vim /etc/tomcat9/tomcat-users.xml

Create a user by scrolling to the bottom of the file. Just before </tomcat-user> and directly below the comment :

<user username="nottie" password="nottie" roles="manager"/>

save and quit

Restart server:
$ sudo service tomcat9 restart

Check if tomcat is installed

$ sudo systemctl status tomcat9

# DevOps activities
- Connect to your Jenkins server
 ** Ensure port 8080 is open on the AWS security settings ** 
- Install Jenkins from a war package and jenkins gets started
- Start the Jenkins server and go on the UI 
- Start new project from the 'New Item' icon
- Add a description of the project 
- Add a plugin to deploy the project by install 'Deploy to container' plugin
(this plugin helps deploying the project from Jenkins to QA environment)
- During process of deployment plugin is expecting a glob parten **/*
- With the path provided an artefact is deployed into QA environment
(ensure to choose private IP address not public IP during the deployment at the plugin level)
-To access the applications use the public IP of QA server: port 8080 and the context path name
(context path used during configuration)
- After accessing the application QA proposes changes on the application 
- To put those changes into effect the app has to be rebuilt
- The build process is automated by going to the configuration page and selecting 'Build triggers' __> SCM
- With Poll SCM, builds happen when there is a change on the source code on github
-If no change has happened and bothe projects are similar, i.e github and jenkins, nothing happens
- Based on the cron job, Jenkins keeps track of an commit changes
- If ANY change happens on the source code even if its a spelling change, Jenkins makes not of that change and makes a sofware build
- If you want sourec code to be build periodically regardless of changes on github or not you select the " Build periodically " icon Build triggers
(nomatter any change or not the project will be build and you will find after an hour 66 builds)
- Take not of difference between on Poll SCM ( only triggers build if there a source code change at the schedule time )and 
the Build periodically (triggers a build regardless whether there is a commit or not at the scheduled time) 

## When qa testing is approved go to Build tests---> Execute shell and type : echo " Testing Passed" 

To make another project a downstream project to exrtend the functionality of the main project:

** It ensures that immediately after project one steps are executed, project 2 steps are executed **

Post build Actions ---> Build other projects ----> "enter name of new project to sync" ---> Add post build action ---> "select archive artifect" ---

---> Archive the artifect---> Files to archive ---> input " **/*.war 

( this means whatever artifacts (files)  are in this path on main project, archive/compress those files) 

## Aftr linking the project AWLAYS ensure to build the MAIN PROJECT not the second one 

Once testing is completed project has to be released to production environment 
- For project 2 to be realsed to production there should be an artifact in the project workspace
- Copy the artifect in project 1 to project 2 :

Project2 ----> Configuration -----> Build steps ---> Add build step ----> Copy artifect to project 

NB : is that option is not available go to the Manage Jenkins and add plugins availavle " Copy artefact"
 - This will automatically copy the artifect once main project is built
 
 -Build main project and check if devops.war artefact is available
 
 - Artefact should be available and ready to be released to prod environment :
 
 Configuration ---> Post build actions ---> Add post build actions ---> "Deploy war/ear to a container ---> War/ear file : " **/*.war ---
 ---> context path " release 10"  ---> container ---> Add container " Tomacat9 --> Credentials ---> add your tomcat credentials --
 ---> Tomacat URL " http://<privateIP_prod_server> " eg  http://172.31.80.90:8080
 
 - save 

## ProdServer setup
Connect to prodserver and setup as above

## Setting up build triggers

Configuration ---> Build triggers ----> Poll SCM --->Schedule

Assign a schedule for a cron job e.g :

* * * * *     : means Jenkins should check with github every minute to check if there has been a change with the source and make a build.

00 10 * 9 *   : everyday at 10:00am 


## Deploy war/ear container can only be done once

To release project for testing we have to sinc it with another project 

## Creating Jenkins users

- First admin has permision to create users
- By default users have permission to do anything  (logged in users can do anything)
- To prevent this install ' Role based stragtegy' plugin
- With this strategy all other created users will be denied access " taff is missing the Overall/Read permission"

First admin must assign roles to users

Manage Jenkins ---> Security---> Manage and Assign roles----> Manage roles

i)    Manage roles  : Create Global role e.g "employee"
ii)   Assign Roles  : Assign usernames 
iii)  Item roles    : Assign roles based on specific projects

## When JOB Read is selected then all users have access to All projects and will be able to see them on their dashboard

** Remove Global 'Overall Admin and Job  Read' . This restricts only to item roles ie specific projects to users

### Pipeline as Code

## Scripted pipe

* Always begins with a keyword "node"
* Easy to write
* If one script fails, projects halts (stops)

## Structure

 node(master/slave)
 { 
    stage( "ContDownload")
    {
    //Code in Groovy
    }
    stage("ContBuild")
    {
    //Groovy
    }
    .
    .
    .
    . repeat and add more blocks for multiples stages
    .
    .
    .
    .
 } ( close node after last stage)

## Declarative pipeline as code

* Always begins with keyword "pipe"
* Structured and organized
* But difficult to write
* If one stage fails , tries to continue with other stages following

## Structure

pipeline
{
    agent any (master/slave)    if any jenkins will decide which node
    stages
    {
          stage("ContDownload")
          {
              steps
              {
              //Code
              }
           }
           .
           .
           .
           .
     }
 }    
     
     ContDeploy step
     
     Pipeline syntax ---> sample step ----> Deploy war/ear container
     
     *** If the plugin is not available on the Sample step dropdown which is typical of new jenkins server 
     - To solve this to deploy the ariefact, you copy the from jenkins server to the qa server
     - To find where the artifect is saved check the logsfrom the build process and check:
     
     " Building war: /var/lib/jenkins/workspace/pipelineproject/target/devops.war  ( this is the source file path were arifect is generated)
     - copy the files to the qa server on tomacat webapps directory for deployments
  
 ## When using the freestyle project the plugin takes care of the deploy no need to mention destination path. 
 - Only give user credentials. URL and context path
   NB: If Plugin not available use scp command
  
  $  scp /var/lib/jenkins/workspace/pipelineproject/target/devops.war
  $  ubuntu@<172.31.82.106:/var/lib/tomcat9/webapps/test2022.war
  
 
 ## Deploying using shell script:
 
 Pipeline Syntax ---> Sample Step ---> Shell script : insert commands above one after the other ----> generate Pipeline Script : copy scrpit ---
 
 ---> Pipeline -->Definition ---> Pipeline script : add to the pipeline script
 
 
 ERROR : Host key verification failed
 
 - Jenkins verification keys are kept in .ssh dir
 
 $ pwd
 $ cd.ssh
 
 However when jenkins is trying to do a deploying jenkins is operating from the path:
 $ cd /var/lib/jenkins
 
 And artifects are available in the "workspace" directly. This dir also has an .shh dir
 
 cd .ssh    If permision denied use:
 
 $ sudo su
 $ cd .ssh
 
 no keys will be found. Move keys to this directly by running:
 
 $ cp /home/ubuntu/.ssh/id* .
 $ ls
 
 id_rsa  id_rsa.pub
 
 ## MAKE SURE ARTIFECT KEYS ARE AVALIABLE WHERE THE SSH KEYS ARE GENERATED otherwise deploymemt will fail
 
 OR When generating keys use: ssh-keygen /     ( so that ssh keys are saved in root)
 
 Coping artefact is a challenge it is better to bring the ssh to where the artefact is located.
 
 So jenkins is copying the artefact from the path above to qa environment
 
 
 # Master/Slave Architecture aka Distributed Jenkins Build
 
 ## Vertical scaling : Adding more resources to increase capabilities
 
 ## Horizontal scaling: Ensuring a website is always available. High availability.Maintaining copies of website in multiple servers to ensure high availability.
 
 Creat 2 Slave nodes
 
 User-data shell script:
 
#!/bin/bash
sudo apt-get update
sudo apt-get install -y default-jdk

Change server names to slave1 and slave 2

on each node run this command:

$ wget <jenkinsURL>/jnlpJars/slave.jar      ( e.g http://44.211.137.203:8080/jnlpJars/slave.jar )
$ ls                  (should see a slave.jar file)

Add executable permissions to slave.jar :

$ chmod a+x slave.jar            (to all users executable permissions are allowed)

Create workspace directory on both nodes:

$ mkdir workdir

Allow passwordless shh

$ sudo passwd ubuntu
enter password
confirm password

$sudo vim /etc/ssh/sshd_config

Change PasswordAuthentication : yes

Restart ssh service

$ sudo servive ssh restart

Copy credentials of the jenkins server onto slave1 and slave2

Connect to jenkins server and run command:

$ ss-copy-id ubuntu@<private_ip_slave1>
$ Enter slave1 password

Do the same for slave2

Go to jenkins UI

Manage jenkins --->Maage nodes and clouds --->New node (enter node name "slave1) ---> Click permanent Agent ---> Create

Number of executors : This depends on the node CPU cores
Remote root directory : Which dir to save artefacts ( dir created on node)
Usage: If project is assigned specific node or jenkins decides which node to assign
Lanuch Method ----> Launch command --->    ssh ubuntu@<privateipslave1>

Jenkins build notifications

-Can use third party tool called Catlight app for collaboration
-Our team are connected with default Catlight notification to obtain notifications on jenkins,
then later on I worked with manager so we can rely on customized jenkins email notifications so we dont get charged at all 
* best practises 

Quick Jenkins server setup

> Launch ec2 instance with user scriot to install java
#!/bin/bash
sudo apt-get update
sudo apt-get install -y default-jdk

> Connect to instance 
> Check if java installed
$ java -version
> Install jenkins: Copy installation package from jenkins.io/downloads
$ wget <jenkins_package>
$ ls 
jenkins.war
> start jenkins :
$ java -jar jenkins.war
> Connect to jenkins server:
<jenkinspv_ip:8080> (make sure port 8080 is open )
>Copy and paste code on terminal for authentication on jenkins UI

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
